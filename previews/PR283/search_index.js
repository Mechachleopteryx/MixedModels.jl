var documenterSearchIndex = {"docs":
[{"location":"constructors/#Model-constructors-1","page":"Model constructors","title":"Model constructors","text":"","category":"section"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"The LinearMixedModel type represents a linear mixed-effects model. Typically it is constructed from a Formula and an appropriate data type, usually a DataFrame.","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"LinearMixedModel","category":"page"},{"location":"constructors/#MixedModels.LinearMixedModel","page":"Model constructors","title":"MixedModels.LinearMixedModel","text":"LinearMixedModel\n\nLinear mixed-effects model representation\n\nFields\n\nformula: the formula for the model\nallterms: a vector of random-effects terms, the fixed-effects terms and the response\nsqrtwts: vector of square roots of the case weights.  Can be empty.\nA: an nt × nt symmetric BlockMatrix of matrices representing hcat(Z,X,y)'hcat(Z,X,y)\nL: a nt × nt BlockMatrix - the lower Cholesky factor of Λ'AΛ+I\noptsum: an OptSummary object\n\nProperties\n\nθ or theta: the covariance parameter vector used to form λ\nβ or beta: the fixed-effects coefficient vector\nλ or lambda: a vector of lower triangular matrices repeated on the diagonal blocks of Λ\nσ or sigma: current value of the standard deviation of the per-observation noise\nb: random effects on the original scale, as a vector of matrices\nreterms: a Vector{ReMat{T}} of random-effects terms.\nfeterms: a Vector{FeMat{T}} of the fixed-effects model matrix and the response\nu: random effects on the orthogonal scale, as a vector of matrices\nlowerbd: lower bounds on the elements of θ\nX: the fixed-effects model matrix\ny: the response vector\n\n\n\n\n\n","category":"type"},{"location":"constructors/#Examples-of-linear-mixed-effects-model-fits-1","page":"Model constructors","title":"Examples of linear mixed-effects model fits","text":"","category":"section"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"For illustration, several data sets from the lme4 package for R are made available in .feather format in this package. These include the Dyestuff and Dyestuff2 data sets.","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"MixedModels.dataset","category":"page"},{"location":"constructors/#MixedModels.dataset","page":"Model constructors","title":"MixedModels.dataset","text":"dataset(nm)\n\nReturn the data frame of test data set named nm, which can be a String or Symbol\n\n\n\n\n\n","category":"function"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"using Test","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"using MixedModels, StatsModels\nusing StatsBase: describe\ndyestuff = MixedModels.dataset(:dyestuff)\ndescribe(dyestuff)","category":"page"},{"location":"constructors/#Models-with-simple,-scalar-random-effects-1","page":"Model constructors","title":"Models with simple, scalar random effects","text":"","category":"section"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"The formula language in Julia is similar to that in R which is based on (Wilkinson and Rogers 1973). However, in Julia the formula must be enclosed in a call to the @formula macro.","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"A basic model with simple, scalar random effects for the levels of batch (the batch of an intermediate product, in this case) is declared and fit as","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"fm = @formula(yield ~ 1 + (1|batch))\nfm1 = fit(MixedModel, fm, dyestuff)","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"@testset \"fm1\" begin\n    @test deviance(fm1) ≈ 327.32706\n    @test varest(fm1) ≈ 2451.2500\n    @test VarCorr(fm1).σρ.batch.σ[1] ≈ 37.260345\nend","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"(If you are new to Julia you may find that this first fit takes an unexpectedly long time, due to Just-In-Time (JIT) compilation of the code. The subsequent calls to such functions are much faster.)","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"using BenchmarkTools\ndyestuff2 = MixedModels.dataset(:dyestuff2)\n@benchmark fit(MixedModel, $fm, $dyestuff2)","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"By default, the model fit is by maximum likelihood. To use the REML criterion instead, add the optional named argument REML=true to the call to fit","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"fm1reml = fit(MixedModel, fm, dyestuff, REML=true)","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"@testset \"fm1reml\" begin\n    @test deviance(fm1reml) ≈ 319.6542768422538\n    @test varest(fm1reml) ≈ 2451.2499\n    @test VarCorr(fm1reml).σρ.batch.σ[1] ≈ 42.000602\nend","category":"page"},{"location":"constructors/#Simple,-scalar-random-effects-1","page":"Model constructors","title":"Simple, scalar random effects","text":"","category":"section"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"A simple, scalar random effects term in a mixed-effects model formula is of the form (1|G). All random effects terms end with |G where G is the grouping factor for the random effect. The name or, more generally, the expression G should evaluate to a categorical array that has a distinct set of levels. The random effects are associated with the levels of the grouping factor.","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"A scalar random effect is, as the name implies, one scalar value for each level of the grouping factor. A simple, scalar random effects term is of the form, (1|G). It corresponds to a shift in the intercept for each level of the grouping factor.","category":"page"},{"location":"constructors/#Models-with-vector-valued-random-effects-1","page":"Model constructors","title":"Models with vector-valued random effects","text":"","category":"section"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"The sleepstudy data are observations of reaction time, reaction, on several subjects, subj, after 0 to 9 days of sleep deprivation, days. A model with random intercepts and random slopes for each subject, allowing for within-subject correlation of the slope and intercept, is fit as","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"sleepstudy = MixedModels.dataset(:sleepstudy)\nfm2 = fit(MixedModel, @formula(reaction ~ 1 + days + (1 + days|subj)), sleepstudy)","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"@testset \"fm2\" begin\n    @test deviance(fm2) ≈ 1751.93934\n    @test varest(fm2) ≈ 654.94145\n    @test collect(VarCorr(fm2).σρ.subj.σ) ≈ collect(((Intercept) = 23.780469, days = 5.716828)) rtol = 6\n    @test VarCorr(fm2).σρ.subj.ρ[1] ≈ 0.08 rtol = 2\nend","category":"page"},{"location":"constructors/#Models-with-multiple,-scalar-random-effects-terms-1","page":"Model constructors","title":"Models with multiple, scalar random-effects terms","text":"","category":"section"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"A model for the Penicillin data incorporates random effects for the plate, and for the sample. As every sample is used on every plate these two factors are crossed.","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"penicillin = MixedModels.dataset(:penicillin)\nfm3 = fit(MixedModel, @formula(diameter ~ 1 + (1|plate) + (1|sample)), penicillin)","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"@testset \"fm3\" begin\n    @test deviance(fm3) ≈ 332.18835\n    @test varest(fm3) ≈ 0.30242640\n    @test VarCorr(fm3).σρ.plate.σ[1] ≈ 0.8455646\n    @test VarCorr(fm3).σρ.sample.σ[1] ≈ 1.7706478\nend","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"In contrast the sample grouping factor is nested within the batch grouping factor in the Pastes data. That is, each level of sample occurs in conjunction with only one level of the batch grouping factor.","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"pastes = MixedModels.dataset(:pastes)\n@test_broken fm4 = fit(MixedModel, @formula(strength ~ 1 + (1|sample) + (1|cask)), pastes)","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"In observational studies it is common to encounter partially crossed grouping factors. For example, the InstEval data are course evaluations by students, s, of instructors, d. Additional covariates include the academic department, dept, in which the course was given and service, whether or not it was a service course.","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"insteval = MixedModels.dataset(:insteval)\nfm5 = fit(MixedModel, @formula(y ~ 1 + service * dept + (1|s) + (1|d)), insteval)","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"@testset \"fm5\" begin\n    @test deviance(fm5) ≈ 2.37585553e5\n    @test varest(fm5) ≈ 1.38472777\n    @test VarCorr(fm5).σρ.s.σ[1] ≈ 0.32468136 rtol = 6\n    @test VarCorr(fm5).σρ.d.σ[1] ≈ 0.50834669 rtol = 6\nend","category":"page"},{"location":"constructors/#Simplifying-the-random-effect-correlation-structure-1","page":"Model constructors","title":"Simplifying the random effect correlation structure","text":"","category":"section"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"MixedEffects.jl estimates not only the variance of the effects for each random effect level, but also the correlation between the random effects for different predictors. So, for the model of the sleepstudy data above, one of the parameters that is estimated is the correlation between each subject's random intercept (i.e., their baseline reaction time) and slope (i.e., their particular change in reaction time over days of sleep deprivation). In some cases, you may wish to simplify the random effects structure by removing these correlation parameters. This often arises when there are many random effects you want to estimate (as is common in psychological experiments with many conditions and covariates), since the number of random effects parameters increases as the square of the number of predictors, making these models difficult to estimate from limited data.","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"A model with uncorrelated random effects for the intercept and slope by subject is fit as","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"fm2zerocorr = fit!(zerocorr!(LinearMixedModel(@formula(reaction ~ 1 + days + (1 + days|subj)), sleepstudy)))","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"@testset \"ZeroCorr deepcopy\" begin\n    fm2zerocorr_alt = fit!(zerocorr!(deepcopy(fm2)))\n    @test deviance(fm2zerocorr) ≈ deviance(fm2zerocorr_alt) rtol = 6\n    @test varest(fm2zerocorr) ≈ varest(fm2zerocorr_alt) rtol = 6\n    @test collect(VarCorr(fm2zerocorr).σρ.subj.σ) ≈ collect(VarCorr(fm2zerocorr_alt).σρ.subj.σ) rtol = 6\n    @test collect(VarCorr(fm2zerocorr).σρ.subj.ρ) ≈ collect(VarCorr(fm2zerocorr_alt).σρ.subj.ρ) rtol = 2\n    @test collect(VarCorr(fm2zerocorr).s) ≈ collect(VarCorr(fm2zerocorr_alt).s) rtol = 6\nend","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"Note that the use of zerocorr! requires the model to be constructed, then altered to eliminate the correlation of the random effects, then fit with a call to the mutating function, fit!.","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"zerocorr!","category":"page"},{"location":"constructors/#MixedModels.zerocorr!","page":"Model constructors","title":"MixedModels.zerocorr!","text":"zerocorr!(m::LinearMixedModel[, trmnms::Vector{Symbol}])\n\nRewrite the random effects specification for the grouping factors in trmnms to zero correlation parameter.\n\nThe default for trmnms is all the names of random-effects terms.\n\nA random effects term is in the zero correlation parameter configuration when the off-diagonal elements of λ are all zero - hence there are no correlation parameters in that term being estimated.\n\n\n\n\n\n","category":"function"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"The special syntax zerocorr can be applied to individual random effects terms inside the @formula:","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"fm2zerocorr_fm = fit(MixedModel, @formula(reaction ~ 1 + days + zerocorr(1 + days|subj)), sleepstudy)","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"    all(fm2zerocorr == fm2zerocorr_fm","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"Alternatively, correlations between parameters can be removed by including them as separate random effects terms:","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"fit(MixedModel, @formula(reaction ~ 1 + days + (1|subj) + (0 + days|subj)), sleepstudy)","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"Note that it is necessary to explicitly block the inclusion of an intercept term by adding 0 in the random-effects term (0+days|subj).","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"Finally, for predictors that are categorical, MixedModels.jl will estimate correlations between each level. Notice the large number of correlation parameters if we treat days as a categorical variable by giving it contrasts:","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"fit(MixedModel, @formula(reaction ~ 1 + days + (1 + days|subj)), sleepstudy,\n    contrasts = Dict(:days => DummyCoding()))","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"Separating the 1 and days random effects into separate terms removes the correlations between the intercept and the levels of days, but not between the levels themselves:","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"fit(MixedModel, @formula(reaction ~ 1 + days + (1|subj) + (0 + days|subj)), sleepstudy,\n    contrasts = Dict(:days => DummyCoding()))","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"But using zerocorr on the individual terms (or zerocorr! on the constructed model object as above) does remove the correlations between the levels:","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"fit(MixedModel, @formula(reaction ~ 1 + days + zerocorr(1 + days|subj)), sleepstudy,\n    contrasts = Dict(:days => DummyCoding()))\nfit(MixedModel, @formula(reaction ~ 1 + days + (1|subj) + zerocorr(0 + days|subj)), sleepstudy,\n    contrasts = Dict(:days => DummyCoding()))","category":"page"},{"location":"constructors/#Fitting-generalized-linear-mixed-models-1","page":"Model constructors","title":"Fitting generalized linear mixed models","text":"","category":"section"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"To create a GLMM representation","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"GeneralizedLinearMixedModel","category":"page"},{"location":"constructors/#MixedModels.GeneralizedLinearMixedModel","page":"Model constructors","title":"MixedModels.GeneralizedLinearMixedModel","text":"GeneralizedLinearMixedModel\n\nGeneralized linear mixed-effects model representation\n\nFields\n\nLMM: a LinearMixedModel - the local approximation to the GLMM.\nβ: the pivoted and possibly truncated fixed-effects vector\nβ₀: similar to β. Used in the PIRLS algorithm if step-halving is needed.\nθ: covariance parameter vector\nb: similar to u, equivalent to broadcast!(*, b, LMM.Λ, u)\nu: a vector of matrices of random effects\nu₀: similar to u.  Used in the PIRLS algorithm if step-halving is needed.\nresp: a GlmResp object\nη: the linear predictor\nwt: vector of prior case weights, a value of T[] indicates equal weights.\n\nThe following fields are used in adaptive Gauss-Hermite quadrature, which applies only to models with a single random-effects term, in which case their lengths are the number of levels in the grouping factor for that term.  Otherwise they are zero-length vectors.\n\ndevc: vector of deviance components\ndevc0: vector of deviance components at offset of zero\nsd: approximate standard deviation of the conditional density\nmult: multiplier\n\nProperties\n\nIn addition to the fieldnames, the following names are also accessible through the . extractor\n\ntheta: synonym for θ\nbeta: synonym for β\nσ or sigma: common scale parameter (value is NaN for distributions without a scale parameter)\nlowerbd: vector of lower bounds on the combined elements of β and θ\nformula, trms, A, L, and optsum: fields of the LMM field\nX: fixed-effects model matrix\ny: response vector\n\n\n\n\n\n","category":"type"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"the distribution family for the response, and possibly the link function, must be specified.","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"verbagg = MixedModels.dataset(:verbagg)\nverbaggform = @formula(r2 ~ 1 + anger + gender + btype + situ + mode + (1|subj) + (1|item));\ngm1 = fit(MixedModel, verbaggform, verbagg, Bernoulli())","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"The canonical link, which is LogitLink for the Bernoulli distribution, is used if no explicit link is specified.","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"Note that, in keeping with convention in the GLM package, the distribution family for a binary (i.e. 0/1) response is the Bernoulli distribution. The Binomial distribution is only used when the response is the fraction of trials returning a positive, in which case the number of trials must be specified as the case weights.","category":"page"},{"location":"constructors/#Optional-arguments-to-fit!-1","page":"Model constructors","title":"Optional arguments to fit!","text":"","category":"section"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"An alternative approach is to create the GeneralizedLinearMixedModel object then call fit! on it. In this form optional arguments fast and/or nAGQ can be passed to the optimization process.","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"As the name implies, fast=true, provides a faster but somewhat less accurate fit. These fits may suffice for model comparisons.","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"gm1a = fit(MixedModel, verbaggform, verbagg, Bernoulli(), fast = true)\ndeviance(gm1a) - deviance(gm1)\n@benchmark fit(MixedModel, $verbaggform, $verbagg, Bernoulli())\n@benchmark fit(MixedModel, $verbaggform, $verbagg, Bernoulli(), fast = true)","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"The optional argument nAGQ=k causes evaluation of the deviance function to use a k point adaptive Gauss-Hermite quadrature rule. This method only applies to models with a single, simple, scalar random-effects term, such as","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"contraception = MixedModels.dataset(:contra)\ncontraform = @formula(use ~ 1 + age + abs2(age) + livch + urban + (1|dist));\nbernoulli = Bernoulli()\ndeviances = Dict{Symbol,Float64}()\nb = @benchmarkable deviances[:default] = deviance(fit(MixedModel, $contraform, $contraception, $bernoulli));\nrun(b)\nb = @benchmarkable deviances[:fast] = deviance(fit(MixedModel, $contraform, $contraception, $bernoulli, fast = true));\nrun(b)\nb = @benchmarkable deviances[:nAGQ] = deviance(fit(MixedModel, $contraform, $contraception, $bernoulli, nAGQ=9));\nrun(b)\nb = @benchmarkable deviances[:nAGQ_fast] = deviance(fit(MixedModel, $contraform, $contraception, $bernoulli, nAGQ=9, fast=true));\nrun(b)\nsort(deviances)","category":"page"},{"location":"constructors/#Extractor-functions-1","page":"Model constructors","title":"Extractor functions","text":"","category":"section"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"LinearMixedModel and GeneralizedLinearMixedModel are subtypes of StatsBase.RegressionModel which, in turn, is a subtype of StatsBase.StatisticalModel. Many of the generic extractors defined in the StatsBase package have methods for these models.","category":"page"},{"location":"constructors/#Model-fit-statistics-1","page":"Model constructors","title":"Model-fit statistics","text":"","category":"section"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"The statistics describing the quality of the model fit include","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"loglikelihood(::StatisticalModel)\naic\nbic\ndof(::StatisticalModel)\nnobs(::StatisticalModel)","category":"page"},{"location":"constructors/#StatsBase.loglikelihood-Tuple{StatisticalModel}","page":"Model constructors","title":"StatsBase.loglikelihood","text":"loglikelihood(obj::StatisticalModel)\n\nReturn the log-likelihood of the model.\n\n\n\n\n\n","category":"method"},{"location":"constructors/#StatsBase.aic","page":"Model constructors","title":"StatsBase.aic","text":"aic(obj::StatisticalModel)\n\nAkaike's Information Criterion, defined as -2 log L + 2k, with L the likelihood of the model, and k its number of consumed degrees of freedom (as returned by dof).\n\n\n\n\n\n","category":"function"},{"location":"constructors/#StatsBase.bic","page":"Model constructors","title":"StatsBase.bic","text":"bic(obj::StatisticalModel)\n\nBayesian Information Criterion, defined as -2 log L + k log n, with L the likelihood of the model,  k its number of consumed degrees of freedom (as returned by dof), and n the number of observations (as returned by nobs).\n\n\n\n\n\n","category":"function"},{"location":"constructors/#StatsBase.dof-Tuple{StatisticalModel}","page":"Model constructors","title":"StatsBase.dof","text":"dof(obj::StatisticalModel)\n\nReturn the number of degrees of freedom consumed in the model, including when applicable the intercept and the distribution's dispersion parameter.\n\n\n\n\n\n","category":"method"},{"location":"constructors/#StatsBase.nobs-Tuple{StatisticalModel}","page":"Model constructors","title":"StatsBase.nobs","text":"nobs(obj::StatisticalModel)\n\nReturn the number of independent observations on which the model was fitted. Be careful when using this information, as the definition of an independent observation may vary depending on the model, on the format used to pass the data, on the sampling plan (if specified), etc.\n\n\n\n\n\n","category":"method"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"loglikelihood(fm1)","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"aic(fm1)","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"bic(fm1)","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"dof(fm1)   # 1 fixed effect, 2 variances","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"nobs(fm1)  # 30 observations","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"loglikelihood(gm1)","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"In general the deviance of a statistical model fit is negative twice the log-likelihood adjusting for the saturated model.","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"deviance(::StatisticalModel)","category":"page"},{"location":"constructors/#StatsBase.deviance-Tuple{StatisticalModel}","page":"Model constructors","title":"StatsBase.deviance","text":"deviance(obj::StatisticalModel)\n\nReturn the deviance of the model relative to a reference, which is usually when applicable the saturated model. It is equal, up to a constant, to -2 log L, with L the likelihood of the model.\n\n\n\n\n\n","category":"method"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"Because it is not clear what the saturated model corresponding to a particular LinearMixedModel should be, negative twice the log-likelihood is called the objective.","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"objective","category":"page"},{"location":"constructors/#MixedModels.objective","page":"Model constructors","title":"MixedModels.objective","text":"objective(m::LinearMixedModel)\n\nReturn negative twice the log-likelihood of model m\n\n\n\n\n\n","category":"function"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"This value is also accessible as the deviance but the user should bear in mind that this doesn't have all the properties of a deviance which is corrected for the saturated model. For example, it is not necessarily non-negative.","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"objective(fm1)","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"deviance(fm1)","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"The value optimized when fitting a GeneralizedLinearMixedModel is the Laplace approximation to the deviance or an adaptive Gauss-Hermite evaluation.","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"MixedModels.deviance!","category":"page"},{"location":"constructors/#MixedModels.deviance!","page":"Model constructors","title":"MixedModels.deviance!","text":"deviance!(m::GeneralizedLinearMixedModel, nAGQ=1)\n\nUpdate m.η, m.μ, etc., install the working response and working weights in m.LMM, update m.LMM.A and m.LMM.R, then evaluate the deviance.\n\n\n\n\n\n","category":"function"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"MixedModels.deviance!(gm1)","category":"page"},{"location":"constructors/#Fixed-effects-parameter-estimates-1","page":"Model constructors","title":"Fixed-effects parameter estimates","text":"","category":"section"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"The coef and fixef extractors both return the maximum likelihood estimates of the fixed-effects coefficients.","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"coef\nfixef","category":"page"},{"location":"constructors/#StatsBase.coef","page":"Model constructors","title":"StatsBase.coef","text":"coef(obj::StatisticalModel)\n\nReturn the coefficients of the model.\n\n\n\n\n\n","category":"function"},{"location":"constructors/#MixedModels.fixef","page":"Model constructors","title":"MixedModels.fixef","text":"fixef(m::MixedModel, permuted=true)\n\nReturn the fixed-effects parameter vector estimate of m.\n\nIf permuted is true the vector elements are permuted according to first(m.feterms).piv and truncated to the rank of that term.\n\n\n\n\n\n","category":"function"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"coef(fm1)","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"fixef(fm1)","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"fixef(fm1)","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"An alternative extractor for the fixed-effects coefficient is the β property. Properties whose names are Greek letters usually have an alternative spelling, which is the name of the Greek letter.","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"fm1.β","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"fm1.beta","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"gm1.β","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"A full list of property names is returned by propertynames","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"propertynames(fm1)","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"propertynames(gm1)","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"The variance-covariance matrix of the fixed-effects coefficients is returned by","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"vcov","category":"page"},{"location":"constructors/#StatsBase.vcov","page":"Model constructors","title":"StatsBase.vcov","text":"vcov(obj::StatisticalModel)\n\nReturn the variance-covariance matrix for the coefficients of the model.\n\n\n\n\n\nvcov(m::LinearMixedModel)\n\nReturns the variance-covariance matrix of the fixed effects. If corr=true, then correlation of fixed effects is returned instead.\n\n\n\n\n\n","category":"function"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"vcov(fm2)","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"vcov(gm1)","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"The standard errors are the square roots of the diagonal elements of the estimated variance-covariance matrix of the fixed-effects coefficient estimators.","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"stderror","category":"page"},{"location":"constructors/#StatsBase.stderror","page":"Model constructors","title":"StatsBase.stderror","text":"stderror(obj::StatisticalModel)\n\nReturn the standard errors for the coefficients of the model.\n\n\n\n\n\n","category":"function"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"stderror(fm2)","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"stderror(gm1)","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"Finally, the coeftable generic produces a table of coefficient estimates, their standard errors, and their ratio. The p-values quoted here should be regarded as approximations.","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"coeftable","category":"page"},{"location":"constructors/#StatsBase.coeftable","page":"Model constructors","title":"StatsBase.coeftable","text":"coeftable(obj::StatisticalModel; level::Real=0.95)\n\nReturn a table of class CoefTable with coefficients and related statistics. level determines the level for confidence intervals (by default, 95%).\n\n\n\n\n\n","category":"function"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"coeftable(fm2)","category":"page"},{"location":"constructors/#Covariance-parameter-estimates-1","page":"Model constructors","title":"Covariance parameter estimates","text":"","category":"section"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"The covariance parameters estimates, in the form shown in the model summary, are a VarCorr object","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"VarCorr","category":"page"},{"location":"constructors/#MixedModels.VarCorr","page":"Model constructors","title":"MixedModels.VarCorr","text":"VarCorr\n\nInformation from the fitted random-effects variance-covariance matrices.\n\nMembers\n\nσρ: a NamedTuple of NamedTuples as returned from σρs\ns: the estimate of the per-observation dispersion parameter\n\nThe main purpose of defining this type is to isolate the logic in the show method.\n\n\n\n\n\n","category":"type"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"VarCorr(fm2)","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"VarCorr(gm1)","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"Individual components are returned by other extractors","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"varest\nsdest","category":"page"},{"location":"constructors/#MixedModels.varest","page":"Model constructors","title":"MixedModels.varest","text":"varest(m::LinearMixedModel)\n\nReturns the estimate of σ², the variance of the conditional distribution of Y given B.\n\n\n\n\n\n","category":"function"},{"location":"constructors/#MixedModels.sdest","page":"Model constructors","title":"MixedModels.sdest","text":"sdest(m::LinearMixedModel)\n\nReturn the estimate of σ, the standard deviation of the per-observation noise.\n\n\n\n\n\n","category":"function"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"varest(fm2)","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"sdest(fm2)","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"fm2.σ","category":"page"},{"location":"constructors/#Conditional-modes-of-the-random-effects-1","page":"Model constructors","title":"Conditional modes of the random effects","text":"","category":"section"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"The ranef extractor","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"ranef","category":"page"},{"location":"constructors/#MixedModels.ranef","page":"Model constructors","title":"MixedModels.ranef","text":"ranef(m::LinearMixedModel; uscale=false, named=true)\n\nReturn, as a Vector{Vector{T}} (Vector{NamedVector{T}} if named=true), the conditional modes of the random effects in model m.\n\nIf uscale is true the random effects are on the spherical (i.e. u) scale, otherwise on the original scale.\n\n\n\n\n\n","category":"function"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"ranef(fm1)","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"fm1.b","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"returns the conditional modes of the random effects given the observed data. That is, these are the values that maximize the conditional density of the random effects given the observed data. For a LinearMixedModel these are also the conditional mean values.","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"These are sometimes called the best linear unbiased predictors or BLUPs but that name is not particularly meaningful.","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"At a superficial level these can be considered as the \"estimates\" of the random effects, with a bit of hand waving, but pursuing this analogy too far usually results in confusion.","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"The corresponding conditional variances are returned by","category":"page"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"condVar","category":"page"},{"location":"constructors/#MixedModels.condVar","page":"Model constructors","title":"MixedModels.condVar","text":"condVar(m::LinearMixedModel)\n\nReturn the conditional variances matrices of the random effects.\n\nThe random effects are returned by ranef as a vector of length k, where k is the number of random effects terms.  The ith element is a matrix of size vᵢ × ℓᵢ  where vᵢ is the size of the vector-valued random effects for each of the ℓᵢ levels of the grouping factor.  Technically those values are the modes of the conditional distribution of the random effects given the observed data.\n\nThis function returns an array of k three dimensional arrays, where the ith array is of size vᵢ × vᵢ × ℓᵢ.  These are the diagonal blocks from the conditional variance-covariance matrix,\n\ns² Λ(Λ'Z'ZΛ + I)⁻¹Λ'\n\n\n\n\n\n","category":"function"},{"location":"constructors/#","page":"Model constructors","title":"Model constructors","text":"condVar(fm1)","category":"page"},{"location":"benchmarks/#Benchmark-Report-for-*/home/bates/.julia/packages/MixedModels/dn0WY/src/MixedModels.jl*-1","page":"Benchmark Report for /home/bates/.julia/packages/MixedModels/dn0WY/src/MixedModels.jl","title":"Benchmark Report for /home/bates/.julia/packages/MixedModels/dn0WY/src/MixedModels.jl","text":"","category":"section"},{"location":"benchmarks/#Job-Properties-1","page":"Benchmark Report for /home/bates/.julia/packages/MixedModels/dn0WY/src/MixedModels.jl","title":"Job Properties","text":"","category":"section"},{"location":"benchmarks/#","page":"Benchmark Report for /home/bates/.julia/packages/MixedModels/dn0WY/src/MixedModels.jl","title":"Benchmark Report for /home/bates/.julia/packages/MixedModels/dn0WY/src/MixedModels.jl","text":"Time of benchmark: 2 Oct 2018 - 13:42\nPackage commit: non gi\nJulia commit: 5d4eac\nJulia command flags: None\nEnvironment variables: None","category":"page"},{"location":"benchmarks/#Results-1","page":"Benchmark Report for /home/bates/.julia/packages/MixedModels/dn0WY/src/MixedModels.jl","title":"Results","text":"","category":"section"},{"location":"benchmarks/#","page":"Benchmark Report for /home/bates/.julia/packages/MixedModels/dn0WY/src/MixedModels.jl","title":"Benchmark Report for /home/bates/.julia/packages/MixedModels/dn0WY/src/MixedModels.jl","text":"Below is a table of this job's results, obtained by running the benchmarks. The values listed in the ID column have the structure [parent_group, child_group, ..., key], and can be used to index into the BaseBenchmarks suite to retrieve the corresponding benchmarks. The percentages accompanying time and memory values in the below table are noise tolerances. The \"true\" time/memory value for a given benchmark is expected to fall within this percentage of the reported value. An empty cell means that the value was zero.","category":"page"},{"location":"benchmarks/#","page":"Benchmark Report for /home/bates/.julia/packages/MixedModels/dn0WY/src/MixedModels.jl","title":"Benchmark Report for /home/bates/.julia/packages/MixedModels/dn0WY/src/MixedModels.jl","text":"ID time GC time memory allocations\n`[\"crossed\", \"Assay:1+A+B*C+(1 G)+(1 H)\"]` 2.943 ms (5%) \n`[\"crossed\", \"Demand:1+U+V+W+X+(1 G)+(1 H)\"]` 2.775 ms (5%) \n`[\"crossed\", \"InstEval:1+A*I+(1 G)+(1 H)\"]` 1.247 s (5%) 114.131 ms\n`[\"crossed\", \"InstEval:1+A+(1 G)+(1 H)+(1 I)\"]` 1.999 s (5%)\n`[\"crossed\", \"Penicillin:1+(1 G)+(1 H)\"]` 2.697 ms (5%) \n`[\"crossed\", \"ScotsSec:1+A+U+V+(1 G)+(1 H)\"]` 4.833 ms (5%) \n`[\"crossed\", \"dialectNL:1+A+T+U+V+W+X+(1 G)+(1 H)+(1 I)\"]` 416.892 ms (5%)\n`[\"crossed\", \"egsingle:1+A+U+V+(1 G)+(1 H)\"]` 31.421 ms (5%) 3.427 ms\n`[\"crossed\", \"ml1m:1+(1 G)+(1 H)\"]` 36.714 s (5%) 225.872 ms\n`[\"crossed\", \"paulsim:1+S+T+U+(1 H)+(1 G)\"]` 14.097 ms (5%) \n`[\"crossedvector\", \"bs10:1+U+V+W+((1+U+V+W) G)+((1+U+V+W) H)\"]` 165.171 ms (5%) 3.149 ms\n`[\"crossedvector\", \"d3:1+U+((1+U) G)+((1+U) H)+((1+U) I)\"]` 49.023 s (5%)\n`[\"crossedvector\", \"d3:1+U+(1 G)+(1 H)+(1 I)\"]` 299.348 ms (5%)\n`[\"crossedvector\", \"gb12:1+S+T+U+V+W+X+Z+((1+S+U+W) G)+((1+S+T+V) H)\"]` 134.101 ms (5%) \n`[\"crossedvector\", \"kb07:1+S+T+U+V+W+X+Z+((1+S+T+U+V+W+X+Z) G)+((1+S+T+U+V+W+X+Z) H)\"]` 3.488 s (5%) 16.508 ms\n`[\"crossedvector\", \"kb07:1+S+T+U+V+W+X+Z+(1 G)+((0+S) G)+((0+T) G)+((0+U) G)+((0+V)\n`[\"nested\", \"Animal:1+(1 G)+(1 H)\"]` 1.261 ms (5%) \n`[\"nested\", \"Chem97:1+(1 G)+(1 H)\"]` 58.460 ms (5%) 6.975 ms\n`[\"nested\", \"Chem97:1+U+(1 G)+(1 H)\"]` 59.353 ms (5%) 7.019 ms\n`[\"nested\", \"Genetics:1+A+(1 G)+(1 H)\"]` 2.062 ms (5%) \n`[\"nested\", \"Pastes:1+(1 G)+(1 H)\"]` 2.298 ms (5%) \n`[\"nested\", \"Semi2:1+A+(1 G)+(1 H)\"]` 2.309 ms (5%) \n`[\"simplescalar\", \"Alfalfa:1+A*B+(1 G)\"]` 1.210 ms (5%)  208.80 KiB (1%)\n`[\"simplescalar\", \"Alfalfa:1+A+B+(1 G)\"]` 1.021 ms (5%)  168.47 KiB (1%)\n`[\"simplescalar\", \"AvgDailyGain:1+A*U+(1 G)\"]` 1.287 ms (5%)  193.33 KiB (1%)\n`[\"simplescalar\", \"AvgDailyGain:1+A+U+(1 G)\"]` 1.144 ms (5%)  169.59 KiB (1%)\n`[\"simplescalar\", \"BIB:1+A*U+(1 G)\"]` 1.574 ms (5%)  222.20 KiB (1%)\n`[\"simplescalar\", \"BIB:1+A+U+(1 G)\"]` 1.171 ms (5%)  171.31 KiB (1%)\n`[\"simplescalar\", \"Bond:1+A+(1 G)\"]` 958.770 μs (5%)  141.25 KiB (1%)\n`[\"simplescalar\", \"Cultivation:1+A*B+(1 G)\"]` 1.089 ms (5%)  173.38 KiB (1%)\n`[\"simplescalar\", \"Cultivation:1+A+(1 G)\"]` 1.138 ms (5%)  162.14 KiB (1%)\n`[\"simplescalar\", \"Cultivation:1+A+B+(1 G)\"]` 1.147 ms (5%)  173.47 KiB (1%)\n`[\"simplescalar\", \"Dyestuff2:1+(1 G)\"]` 830.840 μs (5%)  105.20 KiB (1%)\n`[\"simplescalar\", \"Dyestuff:1+(1 G)\"]` 974.091 μs (5%)  120.86 KiB (1%)\n`[\"simplescalar\", \"Exam:1+A*U+B+(1 G)\"]` 2.250 ms (5%)  1.17 MiB (1%)\n`[\"simplescalar\", \"Exam:1+A+B+U+(1 G)\"]` 2.133 ms (5%)  1.03 MiB (1%)\n`[\"simplescalar\", \"Gasoline:1+U+(1 G)\"]` 1.164 ms (5%)  162.03 KiB (1%)\n`[\"simplescalar\", \"Hsb82:1+A+B+C+U+(1 G)\"]` 3.048 ms (5%)  2.12 MiB (1%)\n`[\"simplescalar\", \"IncBlk:1+A+U+V+W+Z+(1 G)\"]` 1.226 ms (5%)  208.83 KiB (1%)\n`[\"simplescalar\", \"Mississippi:1+A+(1 G)\"]` 980.968 μs (5%)  145.75 KiB (1%)\n`[\"simplescalar\", \"PBIB:1+A+(1 G)\"]` 1.509 ms (5%)  234.47 KiB (1%)\n`[\"simplescalar\", \"Rail:1+(1 G)\"]` 1.251 ms (5%)  151.34 KiB (1%)\n`[\"simplescalar\", \"Semiconductor:1+A*B+(1 G)\"]` 1.313 ms (5%)  222.95 KiB (1%)\n`[\"simplescalar\", \"TeachingII:1+A+T+U+V+W+X+Z+(1 G)\"]` 1.483 ms (5%)  284.53 KiB (1%)\n`[\"simplescalar\", \"cake:1+A*B+(1 G)\"]` 1.606 ms (5%)  412.83 KiB (1%)\n`[\"simplescalar\", \"ergoStool:1+A+(1 G)\"]` 1.057 ms (5%)  155.59 KiB (1%)\n`[\"singlevector\", \"Early:1+U+U&A+((1+U) G)\"]` 20.373 ms (5%)  3.47 MiB (1%)\n`[\"singlevector\", \"HR:1+A*U+V+((1+U) G)\"]` 5.183 ms (5%)  915.00 KiB (1%)\n`[\"singlevector\", \"Oxboys:1+U+((1+U) G)\"]` 13.207 ms (5%)  1.93 MiB (1%)\n`[\"singlevector\", \"SIMS:1+U+((1+U) G)\"]` 61.675 ms (5%)  12.86 MiB (1%)\n`[\"singlevector\", \"WWheat:1+U+((1+U) G)\"]` 7.311 ms (5%)  902.31 KiB (1%)\n`[\"singlevector\", \"Weights:1+A*U+((1+U) G)\"]` 18.303 ms (5%)  3.20 MiB (1%)\n`[\"singlevector\", \"sleepstudy:1+U+((1+U) G)\"]` 4.829 ms (5%)  797.48 KiB (1%)\n`[\"singlevector\", \"sleepstudy:1+U+(1 G)+((0+U) G)\"]` 3.219 ms (5%) ","category":"page"},{"location":"benchmarks/#Benchmark-Group-List-1","page":"Benchmark Report for /home/bates/.julia/packages/MixedModels/dn0WY/src/MixedModels.jl","title":"Benchmark Group List","text":"","category":"section"},{"location":"benchmarks/#","page":"Benchmark Report for /home/bates/.julia/packages/MixedModels/dn0WY/src/MixedModels.jl","title":"Benchmark Report for /home/bates/.julia/packages/MixedModels/dn0WY/src/MixedModels.jl","text":"Here's a list of all the benchmark groups executed by this job:","category":"page"},{"location":"benchmarks/#","page":"Benchmark Report for /home/bates/.julia/packages/MixedModels/dn0WY/src/MixedModels.jl","title":"Benchmark Report for /home/bates/.julia/packages/MixedModels/dn0WY/src/MixedModels.jl","text":"[\"crossed\"]\n[\"crossedvector\"]\n[\"nested\"]\n[\"simplescalar\"]\n[\"singlevector\"]","category":"page"},{"location":"benchmarks/#Julia-versioninfo-1","page":"Benchmark Report for /home/bates/.julia/packages/MixedModels/dn0WY/src/MixedModels.jl","title":"Julia versioninfo","text":"","category":"section"},{"location":"benchmarks/#","page":"Benchmark Report for /home/bates/.julia/packages/MixedModels/dn0WY/src/MixedModels.jl","title":"Benchmark Report for /home/bates/.julia/packages/MixedModels/dn0WY/src/MixedModels.jl","text":"Julia Version 1.0.0\nCommit 5d4eaca0c9 (2018-08-08 20:58 UTC)\nPlatform Info:\n  OS: Linux (x86_64-linux-gnu)\n      Ubuntu 18.04.1 LTS\n  uname: Linux 4.15.0-36-generic #39-Ubuntu SMP Mon Sep 24 16:19:09 UTC 2018 x86_64 x86_64\n  CPU: Intel(R) Core(TM) i5-3570 CPU @ 3.40GHz: \n              speed         user         nice          sys         idle          irq\n       #1  1690 MHz     140498 s        134 s      18382 s    1495130 s          0 s\n       #2  2513 MHz     131505 s         16 s      18277 s    1504212 s          0 s\n       #3  1900 MHz     145131 s        581 s      18892 s    1485409 s          0 s\n       #4  1682 MHz     190751 s         38 s      17941 s    1445446 s          0 s\n       \n  Memory: 15.554645538330078 GB (10502.1171875 MB free)\n  Uptime: 16578.0 sec\n  Load Avg:  1.4091796875  2.07080078125  1.63037109375\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-6.0.0 (ORCJIT, ivybridge)","category":"page"},{"location":"#MixedModels.jl-Documentation-1","page":"MixedModels.jl Documentation","title":"MixedModels.jl Documentation","text":"","category":"section"},{"location":"#","page":"MixedModels.jl Documentation","title":"MixedModels.jl Documentation","text":"CurrentModule = MixedModels","category":"page"},{"location":"#","page":"MixedModels.jl Documentation","title":"MixedModels.jl Documentation","text":"MixedModels.jl is a Julia package providing capabilities for fitting and examining linear and generalized linear mixed-effect models. It is similar in scope to the lme4 package for R.","category":"page"},{"location":"#","page":"MixedModels.jl Documentation","title":"MixedModels.jl Documentation","text":"Pages = [\n        \"constructors.md\",\n        \"optimization.md\",\n        \"GaussHermite.md\",\n        \"bootstrap.md\",\n]\nDepth = 2","category":"page"}]
}
